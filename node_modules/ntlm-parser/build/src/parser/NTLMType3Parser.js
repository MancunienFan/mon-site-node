"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NTLMType3Parser = void 0;
// import dbg from 'debug';
const AbstractParser_1 = require("./AbstractParser");
const interfaces_1 = require("../ntlm/interfaces");
const ntlm_utils_1 = require("../ntlm/ntlm-utils");
const misc_1 = require("../misc");
const flags_1 = require("../ntlm/flags");
// const debug = dbg('node-expose-sspi:ntlm-parser');
class NTLMType3Parser extends AbstractParser_1.AbstractParser {
    constructor(buffer) {
        super(buffer);
    }
    parse() {
        const lmResponse = ntlm_utils_1.getSecBuf(this.buffer, 12);
        const ntlmResponse = ntlm_utils_1.getSecBuf(this.buffer, 20);
        const targetName = ntlm_utils_1.getSecBuf(this.buffer, 28);
        const userName = ntlm_utils_1.getSecBuf(this.buffer, 36);
        const workstationName = ntlm_utils_1.getSecBuf(this.buffer, 44);
        const flag = new Uint32Array(this.buffer.slice(60, 64))[0];
        const encoding = ntlm_utils_1.getNtlmEncoding(flag);
        const lmResponseData = ntlm_utils_1.getLmResponseData(this.buffer, lmResponse);
        const ntlmResponseData = ntlm_utils_1.getNtlmResponseData(this.buffer, ntlmResponse);
        const targetNameData = ntlm_utils_1.getSecBufData(this.buffer, targetName, encoding);
        const userNameData = ntlm_utils_1.getSecBufData(this.buffer, userName, encoding);
        const workstationNameData = ntlm_utils_1.getSecBufData(this.buffer, workstationName, encoding);
        const result = {
            messageType: interfaces_1.NTLMMessageType.AUTHENTICATE_MESSAGE,
            version: 1,
            lmResponse,
            ntlmResponse,
            targetName,
            userName,
            workstationName,
            lmResponseData,
            ntlmResponseData,
            targetNameData,
            userNameData,
            workstationNameData,
        };
        const firstOffset = Math.min(...[lmResponse, ntlmResponse, targetName, userName, workstationName].map(s => s.offset));
        if (firstOffset !== 52) {
            // NTLM version 2
            const r2 = result;
            r2.version = 2;
            const sessionKey = ntlm_utils_1.getSecBuf(this.buffer, 52);
            r2.sessionKey = sessionKey;
            r2.flags = misc_1.getFlags(flags_1.ntlmFlags, flag);
            if (firstOffset !== 64) {
                // NTLM version 3
                const r3 = result;
                r3.version = 3;
                r3.osVersionStructure = ntlm_utils_1.getOSVersionStructure(this.buffer, 64);
            }
        }
        return result;
    }
}
exports.NTLMType3Parser = NTLMType3Parser;
//# sourceMappingURL=NTLMType3Parser.js.map