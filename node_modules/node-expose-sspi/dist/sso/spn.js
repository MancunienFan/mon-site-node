"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPN = void 0;
const __1 = require("..");
const adConnection_1 = require("./adConnection");
const mutex_1 = require("./mutex");
class SPN {
    constructor() { }
    async getListAll() {
        const adRelease = await mutex_1.activeDirectoryMutex.acquire();
        (0, adConnection_1.openADConnection)();
        try {
            const root = await __1.adsi.ADsGestObject('LDAP://rootDSE');
            const distinguishedName = await root.Get('defaultNamingContext');
            const dirsearch = await __1.adsi.ADsOpenObject({
                binding: `LDAP://${distinguishedName}`,
                riid: 'IID_IDirectorySearch',
            });
            dirsearch.SetSearchPreference();
            dirsearch.ExecuteSearch({
                filter: '(&(objectClass=user)(objectCategory=person)(servicePrincipalName=*)(!(cn=krbtgt)))',
            });
            const users = [];
            let hr = dirsearch.GetFirstRow();
            if (hr === __1.adsi.S_ADS_NOMORE_ROWS) {
                throw new Error('GetFirstRow: no more rows');
            }
            const firstRow = {};
            let colName = dirsearch.GetNextColumnName();
            while (colName !== __1.adsi.S_ADS_NOMORE_COLUMNS) {
                const value = await dirsearch.GetColumn(colName);
                firstRow[colName] = value;
                colName = dirsearch.GetNextColumnName();
            }
            users.push(firstRow);
            while (true) {
                const row = {};
                hr = dirsearch.GetNextRow();
                if (hr === __1.adsi.S_ADS_NOMORE_ROWS) {
                    break;
                }
                colName = dirsearch.GetNextColumnName();
                while (colName !== __1.adsi.S_ADS_NOMORE_COLUMNS) {
                    const value = await dirsearch.GetColumn(colName);
                    row[colName] = value;
                    colName = dirsearch.GetNextColumnName();
                }
                users.push(row);
            }
            dirsearch.Release();
            return users.map((user) => ({
                username: user.sAMAccountName[0],
                spn: user.servicePrincipalName,
            }));
        }
        finally {
            (0, adConnection_1.closeADConnection)();
            adRelease();
        }
    }
    async add() { }
}
exports.SPN = SPN;
//# sourceMappingURL=spn.js.map