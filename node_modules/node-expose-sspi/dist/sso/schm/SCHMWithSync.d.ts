import { ServerContextHandleManager } from './ServerContextHandleManager';
import { CtxtHandle } from '../../../lib/api';
import { SSOMethod } from '../interfaces';
export declare class SCHMWithSync extends ServerContextHandleManager {
    private delayMax;
    /**
     * The authentication currently being processed.
     *
     * @private
     * @type {AuthItem}
     * @memberof SCHMWithSync
     */
    private authItem;
    /**
     * The queue of other authentication that are waiting.
     *
     * @private
     * @type {AuthItem[]}
     * @memberof SCHMWithSync
     */
    private queue;
    private serverContextHandle;
    private method;
    constructor(delayMax?: number);
    waitForReleased(): Promise<void>;
    getMethod(): SSOMethod;
    setMethod(ssoMethod: SSOMethod): void;
    getHandle(): CtxtHandle | undefined;
    setHandle(contextHandle: CtxtHandle): void;
    release(): void;
    /**
     * after timeout, all the queue is removed and rejected.
     * does not go to its final state before timeout.
     *
     *
     * @param {AuthItem} authItem
     * @returns
     * @memberof ServerContextHandleManager
     */
    interrupt(): void;
}
