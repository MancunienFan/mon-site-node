"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCHMWithCookies = void 0;
const debug_1 = __importDefault(require("debug"));
const ServerContextHandleManager_1 = require("./ServerContextHandleManager");
const cookies_1 = require("../cookies");
const debug = debug_1.default('node-expose-sspi:schManager');
const COOKIE_KEY = 'NEGOTIATE_ID';
const COOKIE_PREFIX_VALUE = 'NEGOTIATE_';
class SCHMWithCookies extends ServerContextHandleManager_1.ServerContextHandleManager {
    constructor() {
        super(...arguments);
        this.sessionMap = new Map();
    }
    getCookieToken(req, res) {
        super.getCookieToken(req, res);
        debug('initCookie');
        let cookieToken = cookies_1.parseCookies(req)[COOKIE_KEY];
        if (!cookieToken) {
            // generate new cookie
            debug('cookie not found, so generating one');
            cookieToken = COOKIE_PREFIX_VALUE + Math.floor(1e10 * Math.random());
            // create a long lifetime cookie
            res.setHeader('Set-Cookie', `${COOKIE_KEY}=${cookieToken}; Max-Age=999999999`);
        }
        if (!this.sessionMap.has(cookieToken)) {
            this.sessionMap.set(cookieToken, {});
        }
        return cookieToken;
    }
    waitForReleased(cookieToken) {
        debug('wait for release with cookie', cookieToken);
        return Promise.resolve();
    }
    getMethod(cookieToken) {
        const contextInfo = this.sessionMap.get(cookieToken);
        return contextInfo === null || contextInfo === void 0 ? void 0 : contextInfo.method;
    }
    setMethod(ssoMethod, cookieToken) {
        const contextInfo = this.sessionMap.get(cookieToken);
        if (!contextInfo) {
            return;
        }
        contextInfo.method = ssoMethod;
    }
    getHandle(cookieToken) {
        debug('cookieToken: ', cookieToken);
        const contextInfo = this.sessionMap.get(cookieToken);
        return contextInfo === null || contextInfo === void 0 ? void 0 : contextInfo.serverContextHandle;
    }
    setHandle(contextHandle, cookieToken) {
        const contextInfo = this.sessionMap.get(cookieToken);
        if (!contextInfo) {
            return;
        }
        contextInfo.serverContextHandle = contextHandle;
    }
    /**
     * At the end of the negotiation this method MUST be called to release the context handle.
     *
     * @abstract
     * @param {CookieToken} cookieToken
     * @memberof ServerContextHandleManager
     */
    release(cookieToken) {
        this.sessionMap.delete(cookieToken);
    }
}
exports.SCHMWithCookies = SCHMWithCookies;
//# sourceMappingURL=SCHMWithCookies.js.map