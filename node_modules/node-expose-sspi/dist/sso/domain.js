"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isActiveDirectoryReachable = exports.isOnDomain = exports.getDefaultDomain = void 0;
const api_1 = require("../../lib/api");
const adConnection_1 = require("./adConnection");
/**
 * Get the domain (Microsoft domain) or hostname (workgroup) of this machine.
 *
 * @returns {string} domain name
 */
function getDefaultDomain() {
    const str = api_1.sspi.GetUserNameEx('NameSamCompatible');
    const domain = str.split('\\')[0];
    return domain;
}
exports.getDefaultDomain = getDefaultDomain;
/**
 * Want to know if your computer has joined a Microsoft Windows domain ?
 *
 * @export
 * @returns {boolean} true if this computer joined a domain, false otherwise.
 */
function isOnDomain() {
    return api_1.sysinfo.GetComputerNameEx('ComputerNameDnsDomain').length > 0;
}
exports.isOnDomain = isOnDomain;
function isActiveDirectoryReachable() {
    let gc;
    let element;
    let ds;
    try {
        (0, adConnection_1.openADConnection)();
        gc = api_1.adsi.ADsOpenObjectSync({
            binding: 'GC:',
            riid: 'IID_IADsContainer',
        });
        element = gc.Next();
        ds = element.QueryInterface('IID_IDirectorySearch');
    }
    catch (e) {
        return false;
    }
    finally {
        ds === null || ds === void 0 ? void 0 : ds.Release();
        element === null || element === void 0 ? void 0 : element.Release();
        gc === null || gc === void 0 ? void 0 : gc.Release();
        (0, adConnection_1.closeADConnection)();
    }
    return true;
}
exports.isActiveDirectoryReachable = isActiveDirectoryReachable;
//# sourceMappingURL=domain.js.map