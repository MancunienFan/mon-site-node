export * from './interfaces';
import { auth } from './auth';
import { connect } from './connect';
import { getDefaultDomain, isOnDomain, isActiveDirectoryReachable } from './domain';
import { decode, encode, hexDump } from './misc';
import { sleep } from './sleep';
import { SSO } from './SSO';
import { SPN } from './spn';
import './interfaces';
import { Client } from './client';
import { getSPNFromURI } from './client/misc';
import { Mutex } from './mutex';
import { init, getUsers, getUser } from './userdb';
import { openADConnection, closeADConnection } from './adConnection';
import { hasAdminPrivileges } from './uac';
import { getStatusInfo } from './status';
import { negotiateParse } from './msgParser';
/**
 * Wrapper object sso. Everything written in Typescript that is
 * exported from this module is accessible via the `sso` constant object.
 *
 * @export
 */
export declare const sso: {
    auth: typeof auth;
    closeADConnection: typeof closeADConnection;
    connect: typeof connect;
    database: import("./interfaces").Database;
    Client: typeof Client;
    decode: typeof decode;
    encode: typeof encode;
    getDefaultDomain: typeof getDefaultDomain;
    getSPNFromURI: typeof getSPNFromURI;
    getStatusInfo: typeof getStatusInfo;
    getUser: typeof getUser;
    getUsers: typeof getUsers;
    hasAdminPrivileges: typeof hasAdminPrivileges;
    hexDump: typeof hexDump;
    init: typeof init;
    isOnDomain: typeof isOnDomain;
    isActiveDirectoryReachable: typeof isActiveDirectoryReachable;
    Mutex: typeof Mutex;
    negotiateParse: typeof negotiateParse;
    openADConnection: typeof openADConnection;
    SSO: typeof SSO;
    sleep: typeof sleep;
    SPN: typeof SPN;
};
