"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sso = void 0;
__exportStar(require("./interfaces"), exports);
const auth_1 = require("./auth");
const connect_1 = require("./connect");
const domain_1 = require("./domain");
const misc_1 = require("./misc");
const sleep_1 = require("./sleep");
const SSO_1 = require("./SSO");
const spn_1 = require("./spn");
require("./interfaces");
const client_1 = require("./client");
const misc_2 = require("./client/misc");
const mutex_1 = require("./mutex");
const userdb_1 = require("./userdb");
const adConnection_1 = require("./adConnection");
const uac_1 = require("./uac");
const status_1 = require("./status");
const msgParser_1 = require("./msgParser");
/**
 * Wrapper object sso. Everything written in Typescript that is
 * exported from this module is accessible via the `sso` constant object.
 *
 * @export
 */
exports.sso = {
    auth: auth_1.auth,
    closeADConnection: adConnection_1.closeADConnection,
    connect: connect_1.connect,
    database: userdb_1.database,
    Client: client_1.Client,
    decode: misc_1.decode,
    encode: misc_1.encode,
    getDefaultDomain: domain_1.getDefaultDomain,
    getSPNFromURI: misc_2.getSPNFromURI,
    getStatusInfo: status_1.getStatusInfo,
    getUser: userdb_1.getUser,
    getUsers: userdb_1.getUsers,
    hasAdminPrivileges: uac_1.hasAdminPrivileges,
    hexDump: misc_1.hexDump,
    init: userdb_1.init,
    isOnDomain: domain_1.isOnDomain,
    isActiveDirectoryReachable: domain_1.isActiveDirectoryReachable,
    Mutex: mutex_1.Mutex,
    negotiateParse: msgParser_1.negotiateParse,
    openADConnection: adConnection_1.openADConnection,
    SSO: SSO_1.SSO,
    sleep: sleep_1.sleep,
    SPN: spn_1.SPN,
};
//# sourceMappingURL=index.js.map