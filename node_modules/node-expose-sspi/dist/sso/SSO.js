"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSO = void 0;
const api_1 = require("../../lib/api");
const userdb_1 = require("./userdb");
const debug_1 = __importDefault(require("debug"));
const _1 = require(".");
const os_1 = __importDefault(require("os"));
const debug = (0, debug_1.default)('node-expose-sspi:SSO');
class SSO {
    constructor(serverContextHandle, method) {
        this.serverContextHandle = serverContextHandle;
        this.method = method;
        this.options = {
            useActiveDirectory: true,
            useGroups: true,
            useOwner: true,
            groupFilterRegex: '.*',
        };
    }
    async load() {
        const names = api_1.sspi.QueryContextAttributes(this.serverContextHandle, 'SECPKG_ATTR_NAMES');
        const [domain, name] = names.sUserName.split('\\');
        this.user = { domain, name };
        // impersonate to retrieve the used access token.
        api_1.sspi.ImpersonateSecurityContext(this.serverContextHandle);
        debug('impersonate security context ok');
        const userToken = api_1.sspi.OpenThreadToken();
        debug('userToken: ', userToken);
        try {
            debug('about to do GetUserNameEx');
            this.user.displayName = api_1.sspi.GetUserNameEx('NameDisplay');
        }
        catch (e) {
            // exemple of error scenario: local user without displayname.
            this.user.displayName = this.user.name;
        }
        debug('about to do RevertSecurityContext');
        api_1.sspi.RevertSecurityContext(this.serverContextHandle);
        this.user.accessToken = userToken;
        debug('this.options.useGroups: ', this.options.useGroups);
        if (this.options.useGroups) {
            debug('about to do GetTokenInformation');
            const groups = api_1.sspi.GetTokenInformation({
                accessToken: userToken,
                tokenInformationClass: 'TokenGroups',
                filter: this.options.groupFilterRegex,
            });
            groups.sort();
            debug('groups: ', groups);
            this.user.groups = groups;
        }
        // free the userToken
        debug('about to do CloseHandle');
        api_1.sspi.CloseHandle(userToken);
        debug('about to do LookupAccountName');
        const { sid } = api_1.sspi.LookupAccountName(names.sUserName);
        this.user.sid = sid;
        try {
            debug('about to do isOnDomain and isActiveDirectoryReachable');
            if (_1.sso.isOnDomain() &&
                _1.sso.isActiveDirectoryReachable() &&
                os_1.default.hostname() !== domain &&
                this.options.useActiveDirectory) {
                debug('about to do getUser');
                const adUser = await (0, userdb_1.getUser)(`(sAMAccountName=${name})`);
                this.user.adUser = adUser;
            }
        }
        catch (e) {
            debug('cannot getUser from AD. e: ', e);
        }
        // owner info.
        debug('this.options.useOwner: ', this.options.useOwner);
        if (this.options.useOwner) {
            debug('about to do GetUserName');
            const owner = api_1.sspi.GetUserName();
            debug('owner: ', owner);
            this.owner = { name: owner };
            try {
                debug('about to do GetUserNameEx');
                this.owner.displayName = api_1.sspi.GetUserNameEx('NameDisplay');
            }
            catch (e) {
                // exemple of error scenario: local user without displayname.
                this.owner.displayName = this.owner.name;
            }
            debug('this.options.useGroups: ', this.options.useGroups);
            if (this.options.useGroups) {
                debug('about to do OpenProcessToken');
                const processToken = api_1.sspi.OpenProcessToken([
                    'TOKEN_QUERY',
                    'TOKEN_QUERY_SOURCE',
                ]);
                debug('about to do GetTokenInformation');
                const ownerGroups = api_1.sspi.GetTokenInformation({
                    accessToken: processToken,
                    tokenInformationClass: 'TokenGroups',
                    filter: this.options.groupFilterRegex,
                });
                ownerGroups.sort();
                debug('ownerGroups: ', ownerGroups);
                this.owner.groups = ownerGroups;
                debug('about to do CloseHandle');
                api_1.sspi.CloseHandle(processToken);
            }
            try {
                debug('about to do LookupAccountName');
                const o = api_1.sspi.LookupAccountName(owner);
                this.owner.sid = o.sid;
                this.owner.domain = o.domain;
            }
            catch (e) {
                debug('error: ', e);
            }
            debug('SSO end.');
        }
    }
    getJSON() {
        const json = { method: this.method };
        if (this.user) {
            json.user = this.user;
        }
        if (this.owner) {
            json.owner = this.owner;
        }
        return json;
    }
    setOptions(options) {
        this.options = { ...this.options, ...options };
    }
}
exports.SSO = SSO;
//# sourceMappingURL=SSO.js.map