"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const debug_1 = __importDefault(require("debug"));
const HandlerFactory_1 = require("./client/HandlerFactory");
const ClientCookie_1 = require("./client/ClientCookie");
const ClientInfo_1 = require("./client/ClientInfo");
const debug = (0, debug_1.default)('node-expose-sspi:client');
const httpAgent = new http_1.default.Agent({
    keepAlive: true,
});
const httpsAgent = new https_1.default.Agent({
    keepAlive: true,
});
const agent = (parsedURL) => parsedURL.protocol === 'http:' ? httpAgent : httpsAgent;
/**
 * Allow to fetch url with a system that uses the negotiate protocol.
 * Cookies are managed if necessary during the process.
 *
 * @export
 * @class Client
 */
class Client {
    constructor() {
        this.clientCookie = new ClientCookie_1.ClientCookie();
        this.clientInfo = new ClientInfo_1.ClientInfo();
        this.agent = agent;
    }
    /**
     * Set the credentials for running the client as another user.
     *
     * By default, the credentials are the logged windows account.
     *
     * @param {string} domain
     * @param {string} user
     * @param {string} password
     * @memberof Client
     */
    setCredentials(domain, user, password) {
        this.clientInfo.domain = domain;
        this.clientInfo.user = user;
        this.clientInfo.password = password;
    }
    /**
     * Force the targetName to a value.
     *
     * For Kerberos, the targetName is the SPN (Service Principal Name).
     *
     * @param {string} targetName
     * @memberof Client
     */
    setTargetName(targetName) {
        this.clientInfo.targetName = targetName;
    }
    /**
     * Set the Security Support Provider (NTLM, Kerberos, Negotiate)
     *
     * @param {SecuritySupportProvider} ssp
     * @memberof Client
     */
    setSSP(ssp) {
        this.clientInfo.ssp = ssp;
    }
    /**
     * Works as the fetch function of node-fetch node module.
     * This function can handle the negotiate protocol with SPNEGO tokens.
     *
     * @param {string} resource - the URL to fetch
     * @param {RequestInit} [init] - the options (headers, body, etc.)
     * @returns {Promise<Response>} a promise with the HTTP response.
     * @memberof Client
     */
    async fetch(resource, init) {
        const initKeepAlive = { ...init, agent: this.agent };
        this.clientCookie.restituteCookies(initKeepAlive);
        const response = await (0, node_fetch_1.default)(resource, initKeepAlive);
        const result = await this.handleAuth(response, resource, initKeepAlive);
        return result;
    }
    /**
     * The authentication negotiate protocol is handled by this function.
     * It is called by `Client.fetch`.
     *
     * @private
     * @param {Response} response
     * @param {string} resource
     * @param {RequestInit} [init={}]
     * @returns {Promise<Response>}
     * @memberof Client
     */
    async handleAuth(response, resource, init = {}) {
        debug('start response.headers', response.headers);
        debug('response.status', response.status);
        // has cookies ?
        this.clientCookie.saveCookies(response);
        if (response.status !== 401) {
            debug('no status 401');
            return response;
        }
        const authHeader = response.headers.get('www-authenticate');
        if (authHeader === null) {
            debug('no header www-authenticate');
            return response;
        }
        const authenticationType = authHeader.split(/[, ]/)[0];
        const handler = HandlerFactory_1.HandlerFactory.instantiate(authenticationType);
        return await handler.handle(this.clientInfo, this.clientCookie, response, resource, init);
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map