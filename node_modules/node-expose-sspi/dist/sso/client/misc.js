"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.md5 = exports.encodeBase64 = exports.getSPNFromURI = void 0;
const dns_1 = __importDefault(require("dns"));
const debug_1 = __importDefault(require("debug"));
const crypto_1 = __importDefault(require("crypto"));
const api_1 = require("../../../lib/api");
const debug = (0, debug_1.default)('node-expose-sspi:client');
/**
 * Get the SPN the same way Chrome/Firefox or IE does.
 *
 * Links:
 * - getting the domain name: https://stackoverflow.com/questions/8498592/extract-hostname-name-from-string
 * - algo of IE : https://support.microsoft.com/en-us/help/4551934/kerberos-failures-in-internet-explorer
 *
 * @param {string} url
 * @returns {string}
 */
async function getSPNFromURI(url) {
    const msDomainName = api_1.sysinfo.GetComputerNameEx('ComputerNameDnsDomain');
    if (msDomainName.length === 0) {
        debug('Client running on a host that is not part of a Microsoft domain');
        return 'whatever';
    }
    const matches = /^https?:\/\/([^/:?#]+)(?:[/:?#]|$)/i.exec(url);
    const urlDomain = matches && matches[1];
    if (!urlDomain) {
        throw new Error('url is not well parsed. url=' + url);
    }
    debug('urlDomain: ', urlDomain);
    if (['localhost', '127.0.0.1'].includes(urlDomain)) {
        return 'HTTP/localhost';
    }
    // needs urlFQDN for the DNS resolver.
    const urlFQDN = urlDomain.includes('.')
        ? urlDomain
        : urlDomain + '.' + msDomainName;
    let hostname = urlFQDN;
    try {
        while (true) {
            const records = await dns_1.default.promises.resolve(hostname, 'CNAME');
            debug('records', records);
            if (records.length === 0) {
                break;
            }
            hostname = records[0];
        }
    }
    catch (e) {
        debug('DNS error', e);
    }
    const result = 'HTTP/' + hostname;
    debug('result: ', result);
    return result;
}
exports.getSPNFromURI = getSPNFromURI;
function encodeBase64(str) {
    const buff = Buffer.from(str);
    return buff.toString('base64');
}
exports.encodeBase64 = encodeBase64;
function md5(str) {
    return crypto_1.default.createHash('md5').update(str).digest('hex');
}
exports.md5 = md5;
//# sourceMappingURL=misc.js.map