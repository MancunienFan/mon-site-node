"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DigestHandler = void 0;
const debug_1 = __importDefault(require("debug"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const url_1 = require("url");
const AbstractHandler_1 = require("./AbstractHandler");
const misc_1 = require("./misc");
const debug = (0, debug_1.default)('node-expose-sspi:client');
// https://tools.ietf.org/html/rfc7616
class DigestHandler extends AbstractHandler_1.AbstractHandler {
    async handle(clientInfo, clientCookie, response, resource, init = {}) {
        var _a, _b, _c;
        debug('digest handler');
        // get the info from the WWW-Authenticate header.
        const digestHeader = (_a = response.headers
            .get('www-authenticate')) === null || _a === void 0 ? void 0 : _a.substring('Digest '.length);
        if (!digestHeader) {
            return response;
        }
        debug('digestHeader: ', digestHeader);
        const digestChallenge = digestHeader.split(/, */).reduce((acc, prop) => {
            const [key, value] = prop.split('=');
            acc[key] = value.replace(/^"?(.*?)"?$/, '$1');
            return acc;
        }, {});
        debug('digestChallenge: ', digestChallenge);
        const requestInit = { ...init };
        // client nonce.
        const cnonce = (0, misc_1.md5)(Math.round(Math.random() * 1e10).toString(16)).substr(0, 16);
        // HA1 = MD5(username:realm:password)
        const ha1 = getHA1(clientInfo, digestChallenge, cnonce);
        // HA2 = MD5(method:digestURI)
        const method = (_b = requestInit.method) !== null && _b !== void 0 ? _b : 'GET';
        const entityBody = (_c = requestInit.body) !== null && _c !== void 0 ? _c : '';
        const digestURI = new url_1.URL(resource).pathname;
        const ha2 = getHA2(digestChallenge.qop, method, digestURI, entityBody);
        // response = MD5(HA1:nonce:nonceCount:cnonce:qop:HA2)
        const nonceCount = '00000001';
        const qop = 'auth';
        const digestResponse = (0, misc_1.md5)(`${ha1}:${digestChallenge.nonce}:${nonceCount}:${cnonce}:${qop}:${ha2}`);
        debug('digestChallenge.nonce: ', digestChallenge.nonce);
        const digestAnswer = {
            username: `"${clientInfo.user}"`,
            realm: `"${digestChallenge.realm}"`,
            nonce: `"${digestChallenge.nonce}"`,
            uri: `"${digestURI}"`,
            algorithm: digestChallenge.algorithm,
            response: `"${digestResponse}"`,
            qop: qop,
            nc: nonceCount,
            cnonce: `"${cnonce}"`,
        };
        if (digestChallenge.opaque) {
            digestAnswer.opaque = digestChallenge.opaque;
        }
        debug('digestAnswer: ', digestAnswer);
        requestInit.headers = {
            ...init.headers,
            Authorization: 'Digest ' +
                Object.keys(digestAnswer)
                    .map((k) => `${k}=${digestAnswer[k]}`)
                    .join(', '),
        };
        clientCookie.restituteCookies(requestInit);
        debug('first requestInit.headers', requestInit.headers);
        response = await (0, node_fetch_1.default)(resource, requestInit);
        debug('first response.headers', response.headers);
        clientCookie.saveCookies(response);
        return response;
    }
}
exports.DigestHandler = DigestHandler;
function getHA1(clientInfo, digest, cnonce) {
    if (!clientInfo.user) {
        throw new Error('needs a username');
    }
    if (!clientInfo.password) {
        throw new Error('needs a password');
    }
    const a1 = `${clientInfo.user}:${digest.realm}:${clientInfo.password}`;
    const ha1 = (0, misc_1.md5)(a1);
    if (digest.algorithm === 'MD5-sess') {
        // MD5(MD5(username:realm:password):nonce:cnonce)
        const str2 = `${ha1}:${digest.nonce}:${cnonce}`;
        debug('str2: ', str2);
        return (0, misc_1.md5)(str2);
    }
    return ha1;
}
function getHA2(qop, method, digestURI, entityBody) {
    if (qop === 'auth-int') {
        // HA2 = MD5(method:digestURI:MD5(entityBody))
        const a2 = `${method}:${digestURI}:${(0, misc_1.md5)(entityBody)}`;
        debug('a2: ', a2);
        return (0, misc_1.md5)(a2);
    }
    const ha2 = (0, misc_1.md5)(`${method}:${digestURI}`);
    return ha2;
}
//# sourceMappingURL=DigestHandler.js.map