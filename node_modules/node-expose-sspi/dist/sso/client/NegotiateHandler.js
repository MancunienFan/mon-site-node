"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NegotiateHandler = void 0;
const debug_1 = __importDefault(require("debug"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const msgParser_1 = require("../msgParser");
const api_1 = require("../../../lib/api");
const misc_1 = require("./misc");
const AbstractHandler_1 = require("./AbstractHandler");
const misc_2 = require("../misc");
const debug = (0, debug_1.default)('node-expose-sspi:client');
class NegotiateHandler extends AbstractHandler_1.AbstractHandler {
    constructor(authenticationType = 'Negotiate') {
        super();
        this.authenticationType = authenticationType;
    }
    async handle(clientInfo, clientCookie, response, resource, init = {}) {
        var _a;
        debug('starting negotiate auth');
        if (this.authenticationType === 'NTLM') {
            clientInfo.ssp = 'NTLM';
        }
        const packageInfo = api_1.sspi.QuerySecurityPackageInfo(clientInfo.ssp);
        debug('packageInfo: ', packageInfo);
        const credInput = {
            packageName: packageInfo.Name,
            credentialUse: 'SECPKG_CRED_OUTBOUND',
        };
        if (clientInfo.user) {
            credInput.authData = {
                domain: clientInfo.domain,
                user: clientInfo.user,
                password: clientInfo.password,
            };
        }
        debug('credInput: ', credInput);
        const clientCred = api_1.sspi.AcquireCredentialsHandle(credInput);
        const targetName = clientInfo.targetName === undefined
            ? await (0, misc_1.getSPNFromURI)(resource)
            : clientInfo.targetName;
        debug('targetName: ', targetName);
        const input = {
            isFirstCall: true,
            credential: clientCred.credential,
            targetName,
            contextReq: [
                'ISC_REQ_CONNECTION',
                'ISC_REQ_CONFIDENTIALITY',
                'ISC_REQ_MUTUAL_AUTH',
                'ISC_REQ_REPLAY_DETECT',
            ],
            cbMaxToken: packageInfo.cbMaxToken,
            targetDataRep: 'SECURITY_NATIVE_DREP',
        };
        let clientSecurityContext;
        while (response.headers.has('www-authenticate') &&
            response.status === 401 &&
            ((_a = response.headers
                .get('www-authenticate')) === null || _a === void 0 ? void 0 : _a.startsWith(this.authenticationType))) {
            const wwwAuthenticateHeader = response.headers.get('www-authenticate');
            debug('wwwAuthenticateHeader: ', wwwAuthenticateHeader);
            if (clientSecurityContext) {
                if (!wwwAuthenticateHeader.startsWith(this.authenticationType + ' ')) {
                    break;
                }
                const bufferStr = wwwAuthenticateHeader
                    .split(',')[0]
                    .substr((this.authenticationType + ' ').length);
                debug('bufferStr: ', bufferStr);
                const responseToken = (0, msgParser_1.negotiateParse)(bufferStr);
                debug('responseToken: ', responseToken);
                const buffer = (0, misc_2.decode)(bufferStr);
                input.SecBufferDesc = {
                    ulVersion: 0,
                    buffers: [buffer],
                };
                input.contextHandle = clientSecurityContext.contextHandle;
                input.isFirstCall = false;
            }
            debug('input: ', input);
            clientSecurityContext = api_1.sspi.InitializeSecurityContext(input);
            debug('clientSecurityContext: ', clientSecurityContext);
            debug((0, misc_2.hexDump)(clientSecurityContext.SecBufferDesc.buffers[0]));
            if (['SEC_I_COMPLETE_NEEDED', 'SEC_I_COMPLETE_AND_CONTINUE'].includes(clientSecurityContext.SECURITY_STATUS)) {
                debug('you should not see this');
            }
            const base64 = (0, misc_2.encode)(clientSecurityContext.SecBufferDesc.buffers[0]);
            const debugObject = (0, msgParser_1.negotiateParse)(base64);
            debug('debugObject: ', debugObject);
            const requestInit = { ...init };
            requestInit.headers = {
                ...init.headers,
                Authorization: this.authenticationType + ' ' + base64,
            };
            clientCookie.restituteCookies(requestInit);
            debug('requestInit.headers', requestInit.headers);
            response = await (0, node_fetch_1.default)(resource, requestInit);
            debug('response.status', response.status);
            debug('response.headers', response.headers);
            clientCookie.saveCookies(response);
        }
        debug('handleAuth: end');
        return response;
    }
}
exports.NegotiateHandler = NegotiateHandler;
//# sourceMappingURL=NegotiateHandler.js.map