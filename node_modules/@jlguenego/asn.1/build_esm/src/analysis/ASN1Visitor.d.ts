import { ASN1DefinedType } from '../asn1/ASN1DefinedType';
import { ASN1Module } from '../asn1/ASN1Module';
import { ASN1NamedType } from '../asn1/ASN1NamedType';
import { ASN1Sequence } from '../asn1/ASN1Sequence';
import { ASN1ChoiceType } from '../asn1/ASN1ChoiceType';
import { ASN1Tag } from '../asn1/ASN1Tag';
import { ASN1TaggedType } from '../asn1/ASN1TaggedType';
import { ASN1GeneralStringType, ASN1IA5StringType } from '../asn1/types/builtin';
import { TagClass } from '../interfaces/TagClass';
import { ASN1CstNode, ModuleIdentifierCstNode, TypeAssignmentCstNode, TypeCstNode, SequenceTypeCstNode, BuiltinTypeCstNode, NamedTypeCstNode, ComponentTypeCstNode, CharacterStringTypeCstNode, ConstrainedTypeCstNode, PrefixedTypeCstNode, TaggedTypeCstNode, TagCstNode, ClassCstNode, ClassNumberCstNode, DefinedTypeCstNode, ReferencedTypeCstNode, RestrictedCharacterStringTypeCstNode, ChoiceTypeCstNode, AlternativeTypeCstNode } from './interfaces';
declare const BaseASN1VisitorWithDefaults: new (...args: any[]) => import("chevrotain").ICstVisitor<any, any>;
export declare class ASN1Visitor extends BaseASN1VisitorWithDefaults {
    constructor();
    ModuleDefinition(ctx: ASN1CstNode): ASN1Module;
    ModuleIdentifier(ctx: ModuleIdentifierCstNode): string;
    TypeAssignment(ctx: TypeAssignmentCstNode, module: ASN1Module): void;
    Type(ctx: TypeCstNode): any;
    ConstrainedType(ctx: ConstrainedTypeCstNode): any;
    ReferencedType(ctx: ReferencedTypeCstNode): any;
    BuiltinType(ctx: BuiltinTypeCstNode): any;
    PrefixedType(ctx: PrefixedTypeCstNode): any;
    TaggedType(ctx: TaggedTypeCstNode): ASN1TaggedType;
    Tag(ctx: TagCstNode): ASN1Tag;
    Class(ctx: ClassCstNode): TagClass.APPLICATION | TagClass.CONTEXT_SPECIFIC;
    ClassNumber(ctx: ClassNumberCstNode): number;
    DefinedType(ctx: DefinedTypeCstNode): ASN1DefinedType;
    SequenceType(ctx: SequenceTypeCstNode): ASN1Sequence;
    ComponentType(ctx: ComponentTypeCstNode, sequence: ASN1Sequence): void;
    ChoiceType(ctx: ChoiceTypeCstNode): ASN1ChoiceType;
    AlternativeType(ctx: AlternativeTypeCstNode, choice: ASN1ChoiceType): void;
    NamedType(ctx: NamedTypeCstNode): ASN1NamedType;
    CharacterStringType(ctx: CharacterStringTypeCstNode): any;
    RestrictedCharacterStringType(ctx: RestrictedCharacterStringTypeCstNode): ASN1IA5StringType | ASN1GeneralStringType;
}
export {};
