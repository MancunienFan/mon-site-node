import { CstParser } from 'chevrotain';
import { AFFECTATION, allASN1Tokens } from './ASN1Lexer';
import { k } from './lexer/ASN1Keyword';
import { initBuiltinTypeRules } from './parser/BuiltinTypeRules';
import { initBuiltinValueRules } from './parser/BuiltinValueRules';
import { initChoiceTypeRules } from './parser/ChoiceTypeRules';
import { initConstrainedTypeRules } from './parser/ConstrainedTypeRules';
import { initImportsRules } from './parser/ImportsRules';
import { initIntegerTypeRules } from './parser/IntegerTypeRules';
import { initModuleIdentifierRules } from './parser/ModuleIdentifierRules';
import { initObjectIdentifierValueRules } from './parser/ObjectIdentifierValueRules';
import { initReferencedTypeRules } from './parser/ReferencedTypeRules';
import { initSequenceOfTypeRules } from './parser/SequenceOfTypeRules';
import { initSequenceTypeRules } from './parser/SequenceTypeRules';
import { initSizeConstraintRules } from './parser/SizeConstraintRules';
import { initTaggedTypeRules } from './parser/TaggedTypeRules';
import { initTypeRules } from './parser/TypeRules';
export class ASN1CstParser extends CstParser {
    addOrList(names) {
        const array = names.map(name => ({
            ALT: () => {
                this.SUBRULE(this[name]);
            },
        }));
        this.OR(array);
    }
    addOrTokenList(tokens) {
        const array = tokens.map(t => ({
            ALT: () => {
                this.CONSUME(t);
            },
        }));
        this.OR(array);
    }
    constructor() {
        super(allASN1Tokens);
        this.RULE('ModuleDefinition', () => {
            this.SUBRULE(this.ModuleIdentifier);
            this.CONSUME(k.DEFINITIONS);
            this.SUBRULE(this.TagDefault);
            this.SUBRULE(this.ExtensionDefault);
            this.CONSUME(AFFECTATION);
            this.CONSUME(k.BEGIN);
            this.SUBRULE(this.ModuleBody);
            this.CONSUME(k.END);
        });
        this.RULE('TagDefault', () => {
            this.OPTION(() => {
                this.addOrTokenList([k.EXPLICIT, k.IMPLICIT, k.AUTOMATIC]);
                this.CONSUME(k.TAGS);
            });
        });
        this.RULE('ExtensionDefault', () => {
            this.OPTION(() => {
                this.CONSUME(k.EXTENSIBILITY);
                this.CONSUME(k.IMPLIED);
            });
        });
        this.RULE('ModuleBody', () => {
            this.SUBRULE(this.Imports);
            this.SUBRULE(this.AssignmentList);
        });
        this.RULE('AssignmentList', () => {
            this.MANY(() => {
                this.SUBRULE(this.Assignment);
            });
        });
        this.RULE('Assignment', () => {
            this.addOrList(['TypeAssignment', 'ValueAssignment']);
        });
        initModuleIdentifierRules.call(this);
        initBuiltinValueRules.call(this);
        initBuiltinTypeRules.call(this);
        initConstrainedTypeRules.call(this);
        initIntegerTypeRules.call(this);
        initObjectIdentifierValueRules.call(this);
        initSequenceTypeRules.call(this);
        initSequenceOfTypeRules.call(this);
        initTypeRules.call(this);
        initReferencedTypeRules.call(this);
        initTaggedTypeRules.call(this);
        initSizeConstraintRules.call(this);
        initChoiceTypeRules.call(this);
        initImportsRules.call(this);
        this.performSelfAnalysis();
    }
}
//# sourceMappingURL=ASN1CstParser.js.map