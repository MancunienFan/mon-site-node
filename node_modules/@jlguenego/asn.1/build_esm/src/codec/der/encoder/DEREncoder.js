import { TagClass } from '../../../interfaces/TagClass';
import { TagUniversal } from '../../../interfaces/TagUniversal';
import { padHexString } from '../../../misc';
export function DEREncode(asn1Message) {
    const identifierOctetsHexStr = getIdentifierOctet(asn1Message);
    const contentOctetHexStr = getContentOctet(asn1Message);
    const lengthOctetHexStr = getLengthOctet(contentOctetHexStr.length / 2);
    const result = identifierOctetsHexStr + lengthOctetHexStr + contentOctetHexStr;
    return result;
}
export function getIdentifierOctet(m) {
    const tagClassBits = getTagClassBits(m.tagClass);
    const isConstructedBit = getConstructedBit(m.isConstructed);
    const tagCode = m.tagCode;
    const result = padHexString((tagClassBits + isConstructedBit + tagCode).toString(16));
    return result;
}
export function getTagClassBits(tagClass) {
    switch (tagClass) {
        case TagClass.UNIVERSAL:
            return 0;
        case TagClass.APPLICATION:
            return 64;
        case TagClass.CONTEXT_SPECIFIC:
            return 128;
        case TagClass.PRIVATE:
            return 192;
    }
}
export function getConstructedBit(isConstructed) {
    return isConstructed ? 32 : 0;
}
export function getLengthOctet(contentLength) {
    if (contentLength < 127) {
        return padHexString(contentLength.toString(16));
    }
    const end = padHexString(contentLength.toString(16));
    return padHexString((end.length / 2).toString(16)) + end;
}
export function getContentOctet(m) {
    if (m.tagCode === TagUniversal.BOOLEAN.code) {
        if (m.value === true) {
            return 'ff';
        }
        else if (m.value === false) {
            return '00';
        }
    }
    if (m.tagCode === TagUniversal.INTEGER.code) {
        return padHexString(m.value.toString(16));
    }
    if (m.tagCode === TagUniversal.GENERAL_STRING.code ||
        m.tagCode === TagUniversal.IA5STRING.code) {
        return Buffer.from(m.value, 'utf8').toString('hex');
    }
    if (m.tagCode === TagUniversal.SEQUENCE.code) {
        const array = m.value;
        return array.map(msg => DEREncode(msg)).join('');
    }
    return '';
}
//# sourceMappingURL=DEREncoder.js.map