"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1Generator = void 0;
const ASN1DefinedType_1 = require("./asn1/ASN1DefinedType");
const ASN1NamedType_1 = require("./asn1/ASN1NamedType");
const ASN1Sequence_1 = require("./asn1/ASN1Sequence");
const TagClass_1 = require("./interfaces/TagClass");
const TagUniversal_1 = require("./interfaces/TagUniversal");
class ASN1Generator {
    constructor(module, type) {
        this.module = module;
        this.type = type;
        const assignment = module.getAssignment(type);
        this.asn1Message = this.generateFromAssignement(assignment);
    }
    generateFromJson(data) {
        generateFromJson(this.asn1Message, data);
        return this.asn1Message;
    }
    generateFromAssignement(assignment) {
        if (assignment.type instanceof ASN1Sequence_1.ASN1Sequence) {
            return this.generateFromSequence(assignment.type);
        }
        throw new Error('not yet implemented');
    }
    generateFromSequence(sequence) {
        const message = {
            isConstructed: true,
            tagClass: TagClass_1.TagClass.UNIVERSAL,
            tagCode: TagUniversal_1.TagUniversal.SEQUENCE.code,
            tagLabel: TagUniversal_1.TagUniversal.SEQUENCE.label,
            value: [],
        };
        for (let i = 0; i < sequence.components.length; i++) {
            const msg = this.generateFromComponent(sequence.components[i]);
            message.value.push(msg);
        }
        return message;
    }
    generateFromComponent(component) {
        if (!(component instanceof ASN1NamedType_1.ASN1NamedType)) {
            throw new Error('only implement ASN1NamedType at this time');
        }
        let message;
        if (component.type instanceof ASN1Sequence_1.ASN1Sequence) {
            message = this.generateFromSequence(component.type);
        }
        else if (component.type instanceof ASN1DefinedType_1.ASN1DefinedType) {
            message = this.generateFromDefinedType(component.type);
        }
        else {
            message = {
                isConstructed: false,
                tagClass: TagClass_1.TagClass.UNIVERSAL,
                tagCode: -1,
                tagLabel: 'TBD',
                value: null,
            };
            switch (component.type.constructor.name) {
                case 'ASN1BooleanType':
                    message.tagLabel = TagUniversal_1.TagUniversal.BOOLEAN.label;
                    message.tagCode = TagUniversal_1.TagUniversal.BOOLEAN.code;
                    message.value = false;
                    break;
                case 'ASN1GeneralStringType':
                    message.tagLabel = TagUniversal_1.TagUniversal.GENERAL_STRING.label;
                    message.tagCode = TagUniversal_1.TagUniversal.GENERAL_STRING.code;
                    message.value = 'to be replaced';
                    break;
                case 'ASN1IA5StringType':
                    message.tagLabel = TagUniversal_1.TagUniversal.IA5STRING.label;
                    message.tagCode = TagUniversal_1.TagUniversal.IA5STRING.code;
                    message.value = 'to be replaced';
                    break;
                case 'ASN1IntegerType':
                    message.tagLabel = TagUniversal_1.TagUniversal.INTEGER.label;
                    message.tagCode = TagUniversal_1.TagUniversal.INTEGER.code;
                    message.value = 1337;
                    break;
                default:
                    throw new Error('not yet implemented: type = ' + component.type.constructor.name);
            }
        }
        message.tagName = component.name;
        return message;
    }
    generateFromDefinedType(type) {
        const assignment = this.module.getAssignment(type.name);
        const message = this.generateFromAssignement(assignment);
        message.tagDefinedType = type.name;
        return message;
    }
}
exports.ASN1Generator = ASN1Generator;
function generateFromJson(msg, data) {
    const array = msg.value;
    for (const key of Object.keys(data)) {
        const cell = array.find(c => c.tagName === key);
        if (cell === undefined) {
            throw new Error('cell not found for key = ' + key);
        }
        if (cell.tagCode === TagUniversal_1.TagUniversal.SEQUENCE.code) {
            generateFromJson(cell, data[key]);
        }
        else {
            cell.value = data[key];
        }
    }
}
//# sourceMappingURL=ASN1Generator.js.map