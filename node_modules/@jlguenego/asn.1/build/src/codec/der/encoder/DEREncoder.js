"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContentOctet = exports.getLengthOctet = exports.getConstructedBit = exports.getTagClassBits = exports.getIdentifierOctet = exports.DEREncode = void 0;
const TagClass_1 = require("../../../interfaces/TagClass");
const TagUniversal_1 = require("../../../interfaces/TagUniversal");
const misc_1 = require("../../../misc");
function DEREncode(asn1Message) {
    const identifierOctetsHexStr = getIdentifierOctet(asn1Message);
    const contentOctetHexStr = getContentOctet(asn1Message);
    const lengthOctetHexStr = getLengthOctet(contentOctetHexStr.length / 2);
    const result = identifierOctetsHexStr + lengthOctetHexStr + contentOctetHexStr;
    return result;
}
exports.DEREncode = DEREncode;
function getIdentifierOctet(m) {
    const tagClassBits = getTagClassBits(m.tagClass);
    const isConstructedBit = getConstructedBit(m.isConstructed);
    const tagCode = m.tagCode;
    const result = (0, misc_1.padHexString)((tagClassBits + isConstructedBit + tagCode).toString(16));
    return result;
}
exports.getIdentifierOctet = getIdentifierOctet;
function getTagClassBits(tagClass) {
    switch (tagClass) {
        case TagClass_1.TagClass.UNIVERSAL:
            return 0;
        case TagClass_1.TagClass.APPLICATION:
            return 64;
        case TagClass_1.TagClass.CONTEXT_SPECIFIC:
            return 128;
        case TagClass_1.TagClass.PRIVATE:
            return 192;
    }
}
exports.getTagClassBits = getTagClassBits;
function getConstructedBit(isConstructed) {
    return isConstructed ? 32 : 0;
}
exports.getConstructedBit = getConstructedBit;
function getLengthOctet(contentLength) {
    if (contentLength < 127) {
        return (0, misc_1.padHexString)(contentLength.toString(16));
    }
    const end = (0, misc_1.padHexString)(contentLength.toString(16));
    return (0, misc_1.padHexString)((end.length / 2).toString(16)) + end;
}
exports.getLengthOctet = getLengthOctet;
function getContentOctet(m) {
    if (m.tagCode === TagUniversal_1.TagUniversal.BOOLEAN.code) {
        if (m.value === true) {
            return 'ff';
        }
        else if (m.value === false) {
            return '00';
        }
    }
    if (m.tagCode === TagUniversal_1.TagUniversal.INTEGER.code) {
        return (0, misc_1.padHexString)(m.value.toString(16));
    }
    if (m.tagCode === TagUniversal_1.TagUniversal.GENERAL_STRING.code ||
        m.tagCode === TagUniversal_1.TagUniversal.IA5STRING.code) {
        return Buffer.from(m.value, 'utf8').toString('hex');
    }
    if (m.tagCode === TagUniversal_1.TagUniversal.SEQUENCE.code) {
        const array = m.value;
        return array.map(msg => DEREncode(msg)).join('');
    }
    return '';
}
exports.getContentOctet = getContentOctet;
//# sourceMappingURL=DEREncoder.js.map