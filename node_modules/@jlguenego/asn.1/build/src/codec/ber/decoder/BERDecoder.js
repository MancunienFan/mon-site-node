"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BERDecode = void 0;
const CursorDataView_1 = require("../../../CursorDataView");
const LengthType_1 = require("../../../interfaces/LengthType");
const TagUniversal_1 = require("../../../interfaces/TagUniversal");
const TagDecoder_1 = require("../../../TagDecoder");
const Identifier_1 = require("./Identifier");
const misc_1 = require("./misc");
const ReadBitString_1 = require("./primitive/ReadBitString");
const ReadBoolean_1 = require("./primitive/ReadBoolean");
const ReadIA5String_1 = require("./primitive/ReadIA5String");
const ReadInteger_1 = require("./primitive/ReadInteger");
const ReadObjectIdentifier_1 = require("./primitive/ReadObjectIdentifier");
const ReadOctetString_1 = require("./primitive/ReadOctetString");
function BERDecode(input) {
    const cdv = new CursorDataView_1.CursorDataView(input);
    const identifier = readIdentifierOctets(cdv);
    if (identifier.isComposed()) {
        return readComposed(cdv, identifier);
    }
    return readSimple(cdv, identifier);
}
exports.BERDecode = BERDecode;
function readIdentifierOctets(cdv) {
    const result = new Identifier_1.Identifier();
    const octet = cdv.read();
    // (8.1.2.2 a)
    result.tagClass = (0, misc_1.getTagClass)(octet);
    // (8.1.2.2 b)
    result.constructed = (0, misc_1.isConstructed)(octet);
    // (8.1.2.4.1 c)
    result.tag = octet & 31;
    if (result.tag < 31) {
        return result;
    }
    // multi octets.
    let tagNumberStr = '';
    let octetN;
    while (true) {
        octetN = cdv.read();
        // bit 7 to 1 (8.1.2.4.2 b)
        const str = (octetN & 127).toString(2);
        console.log('str: ', str);
        tagNumberStr += str;
        // last octet (8.1.2.4.2 a)
        if ((octetN & 128) === 0) {
            break;
        }
    }
    // (8.1.2.4.2 b) concactenation
    result.tag = parseInt(tagNumberStr, 2);
    return result;
}
function readLengthOctets(cdv) {
    const berLength = { type: LengthType_1.LengthType.DEFINITE, length: 0 };
    const length = cdv.read();
    // (8.1.3.6.1): indefinite form
    if (length === 128) {
        return { type: LengthType_1.LengthType.INDEFINITE, length: -1 };
    }
    // (8.1.3.4): one octet case (<=127, definite form)
    if ((length & 128) === 0) {
        berLength.length = length;
        return berLength;
    }
    // (8.1.3.5 b) Big Length case (>127)
    let bigLength = 0;
    for (let i = 0; i < length - 128; i++) {
        const nbr = cdv.read();
        bigLength = bigLength * 256 + nbr;
    }
    berLength.length = bigLength;
    return berLength;
}
function readComposed(cdv, identifier) {
    const { length, type } = readLengthOctets(cdv);
    const result = {
        tagClass: identifier.tagClass,
        isConstructed: identifier.constructed,
        tagCode: identifier.tag,
        tagLabel: TagDecoder_1.TagDecoder.getLabel(identifier.tagClass, identifier.tag),
        length: length,
        lengthType: type,
        value: null,
    };
    if (length === 0) {
        return result;
    }
    const max = cdv.index + length;
    result.value = [];
    while (cdv.index < max) {
        const ident = readIdentifierOctets(cdv);
        if (ident.isComposed()) {
            const a = readComposed(cdv, ident);
            result.value.push(a);
            continue;
        }
        result.value.push(readSimple(cdv, ident));
    }
    return result;
}
function readSimple(cdv, identifier) {
    const { length, type } = readLengthOctets(cdv);
    const result = {
        tagClass: identifier.tagClass,
        isConstructed: identifier.constructed,
        tagCode: identifier.tag,
        tagLabel: TagDecoder_1.TagDecoder.getLabel(identifier.tagClass, identifier.tag),
        length: length,
        lengthType: type,
        value: null,
    };
    if (identifier.tag === TagUniversal_1.TagUniversal.BOOLEAN.code) {
        result.value = (0, ReadBoolean_1.readBoolean)(cdv, length);
        return result;
    }
    if (identifier.tag === TagUniversal_1.TagUniversal.INTEGER.code) {
        result.value = (0, ReadInteger_1.readInteger)(cdv, length);
        return result;
    }
    if (identifier.tag === TagUniversal_1.TagUniversal.BIT_STRING.code) {
        // 8.6.1 The encoding of a bitstring value shall be either primitive
        // or constructed at the option of the sender.
        result.value = (0, ReadBitString_1.readBitString)(cdv, length);
        return result;
    }
    if (identifier.tag === TagUniversal_1.TagUniversal.OCTET_STRING.code) {
        // 8.7.1 The encoding of an octetstring value shall be either primitive
        // or constructed at the option of the sender.
        result.value = (0, ReadOctetString_1.readOctetString)(cdv, length);
        return result;
    }
    if (identifier.tag === TagUniversal_1.TagUniversal.OBJECT_IDENTIFIER.code) {
        if (identifier.constructed) {
            throw new Error('The encoding of an Object Identifier should be primitive (clause 8.19.1).');
        }
        result.value = (0, ReadObjectIdentifier_1.readObjectIdentifier)(cdv, length);
        return result;
    }
    if (identifier.tag === TagUniversal_1.TagUniversal.IA5STRING.code) {
        result.value = (0, ReadIA5String_1.readIA5String)(cdv, length);
        return result;
    }
    if (identifier.tag === TagUniversal_1.TagUniversal.GENERAL_STRING.code) {
        result.value = (0, ReadIA5String_1.readIA5String)(cdv, length);
        return result;
    }
    throw new Error(`cannot understand the identifier tag number: ${identifier.tag}`);
}
//# sourceMappingURL=BERDecoder.js.map