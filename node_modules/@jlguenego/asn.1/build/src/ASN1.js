"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1 = void 0;
const ASN1ModuleFactory_1 = require("./asn1/ASN1ModuleFactory");
const ASN1Generator_1 = require("./ASN1Generator");
const ASN1Validator_1 = require("./ASN1Validator");
const BERDecoder_1 = require("./codec/ber/decoder/BERDecoder");
const DEREncoder_1 = require("./codec/der/encoder/DEREncoder");
const EncodingRule_1 = require("./EncodingRule");
const ASN1MessageFormat_1 = require("./interfaces/ASN1MessageFormat");
const misc_1 = require("./misc");
class ASN1 {
    static decode(message, opts = {}) {
        const options = {
            format: ASN1MessageFormat_1.ASN1MessageFormat.HEX,
            encodingRule: EncodingRule_1.EncodingRule.DER,
            ...opts,
        };
        let input;
        if (typeof message === 'string') {
            input = (0, misc_1.getArrayBufferFromStr)(message, options.format);
        }
        else {
            input = message;
        }
        if ([EncodingRule_1.EncodingRule.BER, EncodingRule_1.EncodingRule.CER, EncodingRule_1.EncodingRule.DER].includes(options.encodingRule)) {
            return (0, BERDecoder_1.BERDecode)(input);
        }
        throw new Error('Encoding rule not yet implemented: ' + options.encodingRule);
    }
    static getModuleFromStr(definition) {
        return ASN1ModuleFactory_1.ASN1ModuleFactory.compile(definition);
    }
    static encode(asn1Message, encodingRule = EncodingRule_1.EncodingRule.DER) {
        if (encodingRule === EncodingRule_1.EncodingRule.DER ||
            encodingRule === EncodingRule_1.EncodingRule.BER) {
            return Buffer.from((0, DEREncoder_1.DEREncode)(asn1Message), 'hex');
        }
        throw new Error('generate: encoding rule not yet implemented: ' + encodingRule);
    }
    static generate(module, type, data, opts = {}) {
        const options = {
            encodingRule: EncodingRule_1.EncodingRule.DER,
            inputFormat: 'json',
            ...opts,
        };
        const generator = new ASN1Generator_1.ASN1Generator(module, type);
        const asn1Message = generator.generateFromJson(data);
        return ASN1.encode(asn1Message, options.encodingRule);
    }
    static validate(module, message, type) {
        const msg = JSON.parse(JSON.stringify(message));
        const validator = new ASN1Validator_1.ASN1Validator(module);
        validator.validate(msg, type);
        return msg;
    }
}
exports.ASN1 = ASN1;
//# sourceMappingURL=ASN1.js.map