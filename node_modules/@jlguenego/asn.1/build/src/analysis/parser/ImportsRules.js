"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initImportsRules = void 0;
const ASN1Lexer_1 = require("../ASN1Lexer");
const ASN1Keyword_1 = require("../lexer/ASN1Keyword");
function initImportsRules() {
    this.RULE('Imports', () => {
        this.OPTION(() => {
            this.CONSUME(ASN1Keyword_1.k.IMPORTS);
            this.SUBRULE(this.SymbolsImported);
            this.CONSUME(ASN1Lexer_1.SEMI_COLUMN);
        });
    });
    this.RULE('SymbolsImported', () => {
        this.OPTION(() => {
            this.SUBRULE(this.SymbolsFromModuleList);
        });
    });
    this.RULE('SymbolsFromModuleList', () => {
        this.MANY(() => {
            this.SUBRULE(this.SymbolsFromModule);
        });
    });
    this.RULE('SymbolsFromModule', () => {
        this.SUBRULE(this.SymbolList);
        this.CONSUME(ASN1Keyword_1.k.FROM);
        this.SUBRULE(this.GlobalModuleReference);
    });
    this.RULE('SymbolList', () => {
        this.MANY_SEP({
            SEP: ASN1Lexer_1.COMMA,
            DEF: () => {
                this.SUBRULE(this.Symbol);
            },
        });
    });
    this.RULE('Symbol', () => {
        this.addOrList([
            'Reference',
            // 'ParameterizedReference'
        ]);
    });
    this.RULE('Reference', () => {
        this.addOrTokenList([ASN1Lexer_1.TypeReference, ASN1Lexer_1.Identifier]);
    });
    this.RULE('GlobalModuleReference', () => {
        // module reference
        this.CONSUME(ASN1Lexer_1.TypeReference);
        this.SUBRULE(this.AssignedIdentifier);
    });
    this.RULE('AssignedIdentifier', () => {
        this.addOrList(['ObjectIdentifierValue', 'DefinedValue']);
    });
}
exports.initImportsRules = initImportsRules;
//# sourceMappingURL=ImportsRules.js.map