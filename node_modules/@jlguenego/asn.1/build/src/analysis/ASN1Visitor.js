"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1Visitor = void 0;
// import {inspect} from 'util';
const ASN1Assignment_1 = require("../asn1/ASN1Assignment");
const ASN1DefinedType_1 = require("../asn1/ASN1DefinedType");
const ASN1Module_1 = require("../asn1/ASN1Module");
const ASN1NamedType_1 = require("../asn1/ASN1NamedType");
const ASN1Sequence_1 = require("../asn1/ASN1Sequence");
const ASN1ChoiceType_1 = require("../asn1/ASN1ChoiceType");
const ASN1Tag_1 = require("../asn1/ASN1Tag");
const ASN1TaggedType_1 = require("../asn1/ASN1TaggedType");
const builtin_1 = require("../asn1/types/builtin");
const TagClass_1 = require("../interfaces/TagClass");
const ASN1CstParser_1 = require("./ASN1CstParser");
const parserInstance = new ASN1CstParser_1.ASN1CstParser();
// The base visitor class can be accessed via the a parser instance.
// const BaseASN1Visitor = parserInstance.getBaseCstVisitorConstructor();
const BaseASN1VisitorWithDefaults = parserInstance.getBaseCstVisitorConstructorWithDefaults();
class ASN1Visitor extends BaseASN1VisitorWithDefaults {
    constructor() {
        super();
        this.validateVisitor();
    }
    ModuleDefinition(ctx) {
        const name = this.visit(ctx.ModuleIdentifier);
        const module = new ASN1Module_1.ASN1Module(name);
        this.visit(ctx.ModuleBody, module);
        return module;
    }
    ModuleIdentifier(ctx) {
        const name = ctx.TypeReference[0].image;
        return name;
    }
    TypeAssignment(ctx, module) {
        const name = ctx.TypeReference[0].image;
        const assignment = new ASN1Assignment_1.ASN1Assignment(name);
        const type = this.visit(ctx.Type);
        assignment.setType(type);
        module.addAssignment(assignment);
    }
    Type(ctx) {
        if (ctx.ConstrainedType) {
            return this.visit(ctx.ConstrainedType);
        }
        if (ctx.ReferencedType) {
            return this.visit(ctx.ReferencedType);
        }
    }
    ConstrainedType(ctx) {
        return this.visit(ctx.BuiltinType);
    }
    ReferencedType(ctx) {
        if (ctx.DefinedType) {
            return this.visit(ctx.DefinedType);
        }
        if (ctx.UsefulType) {
            return this.visit(ctx.UsefulType);
        }
    }
    BuiltinType(ctx) {
        if (ctx.PrefixedType) {
            return this.visit(ctx.PrefixedType);
        }
        if (ctx.SequenceType) {
            return this.visit(ctx.SequenceType);
        }
        if (ctx.BooleanType) {
            return new builtin_1.ASN1BooleanType();
        }
        if (ctx.IntegerType) {
            return new builtin_1.ASN1IntegerType();
        }
        if (ctx.CharacterStringType) {
            return this.visit(ctx.CharacterStringType);
        }
        if (ctx.ChoiceType) {
            return this.visit(ctx.ChoiceType);
        }
        return null;
    }
    PrefixedType(ctx) {
        return this.visit(ctx.TaggedType);
    }
    TaggedType(ctx) {
        const tag = this.visit(ctx.Tag);
        const type = this.visit(ctx.Type);
        const isImplicit = ctx.IMPLICIT ? true : false;
        return new ASN1TaggedType_1.ASN1TaggedType(tag, type, isImplicit);
    }
    Tag(ctx) {
        const tagClass = this.visit(ctx.Class);
        const tagCode = this.visit(ctx.ClassNumber);
        return new ASN1Tag_1.ASN1Tag(tagClass, tagCode);
    }
    Class(ctx) {
        if (ctx.APPLICATION) {
            return TagClass_1.TagClass.APPLICATION;
        }
        return TagClass_1.TagClass.CONTEXT_SPECIFIC;
    }
    ClassNumber(ctx) {
        return +ctx.Number[0].image;
    }
    DefinedType(ctx) {
        const name = ctx.TypeReference[0].image;
        return new ASN1DefinedType_1.ASN1DefinedType(name);
    }
    SequenceType(ctx) {
        const sequence = new ASN1Sequence_1.ASN1Sequence();
        this.visit(ctx.ComponentTypeLists, sequence);
        return sequence;
    }
    ComponentType(ctx, sequence) {
        const namedType = this.visit(ctx.NamedType);
        if (ctx.OPTIONAL) {
            namedType.optional = true;
        }
        sequence.addComponent(namedType);
    }
    ChoiceType(ctx) {
        const choice = new ASN1ChoiceType_1.ASN1ChoiceType();
        this.visit(ctx.AlternativeTypeLists, choice);
        return choice;
    }
    AlternativeType(ctx, choice) {
        const namedType = this.visit(ctx.NamedType);
        choice.addAlternative(namedType);
    }
    NamedType(ctx) {
        const name = ctx.Identifier[0].image;
        const type = this.visit(ctx.Type);
        const namedType = new ASN1NamedType_1.ASN1NamedType(name, type);
        return namedType;
    }
    CharacterStringType(ctx) {
        return this.visit(ctx.RestrictedCharacterStringType);
    }
    RestrictedCharacterStringType(ctx) {
        if (ctx.IA5String) {
            return new builtin_1.ASN1IA5StringType();
        }
        if (ctx.GeneralString) {
            return new builtin_1.ASN1GeneralStringType();
        }
        return new builtin_1.ASN1IA5StringType();
    }
}
exports.ASN1Visitor = ASN1Visitor;
//# sourceMappingURL=ASN1Visitor.js.map