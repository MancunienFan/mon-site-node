"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const path_1 = require("path");
const krb_ap_req_json_1 = __importDefault(require("./data/kerberos/krb-ap-req.json"));
const krb_ap_req_validated_json_1 = __importDefault(require("./data/kerberos/krb-ap-req.validated.json"));
const krb_ap_rep_json_1 = __importDefault(require("./data/kerberos/krb-ap-rep.json"));
const krb_ap_rep_validated_json_1 = __importDefault(require("./data/kerberos/krb-ap-rep.validated.json"));
const src_1 = require("../src");
const ASN1Node_1 = require("../src/node/ASN1Node");
const ASN1MessageFormat_1 = require("../src/interfaces/ASN1MessageFormat");
describe('Kerberos Protocol', () => {
    it('test hex base64 conv', () => {
        const base64Msg = (0, fs_1.readFileSync)((0, path_1.resolve)(__dirname, 'data/kerberos/krb-ap-req.base64.der'), {
            encoding: 'utf8',
        });
        const hexMsg = (0, fs_1.readFileSync)((0, path_1.resolve)(__dirname, 'data/kerberos/krb-ap-req.hex.der'), {
            encoding: 'utf8',
        });
        const buf = Buffer.from((0, src_1.sanitize)(base64Msg), 'base64').toString('hex');
        assert_1.default.deepStrictEqual(buf, (0, src_1.sanitize)(hexMsg));
    });
    it('test kerberos AP-REQ msg', () => {
        const output = ASN1Node_1.ASN1Node.parseFileMsg((0, path_1.resolve)(__dirname, 'data/kerberos/krb-ap-req.hex.der'), {
            encodingRule: src_1.EncodingRule.DER,
        });
        assert_1.default.deepStrictEqual(output, krb_ap_req_json_1.default);
    });
    it('test kerberos asn.1 file from the RFC4120', () => {
        const definition = (0, fs_1.readFileSync)((0, path_1.resolve)(__dirname, 'data/kerberos/kerberos.asn1'), {
            encoding: 'utf8',
        });
        const module = src_1.ASN1.getModuleFromStr(definition);
        // console.log('module: ', inspect(module, false, null, true));
        const validated = src_1.ASN1.validate(module, krb_ap_req_json_1.default, 'GSS-API');
        // console.log('validated: ', inspect(validated, false, null, true));
        assert_1.default.deepStrictEqual(validated, krb_ap_req_validated_json_1.default);
    });
    it('get the PrincipalName', () => {
        const generalStrings = src_1.ASN1MsgUtils.queryAll(krb_ap_req_json_1.default, 'tagLabel', 'GeneralString');
        const principalName = generalStrings
            .map(v => v.value)
            .slice(1)
            .join('/');
        assert_1.default.deepStrictEqual(principalName, 'HTTP/localhost');
    });
    it('test kerberos AP-REP msg', () => {
        const output = ASN1Node_1.ASN1Node.parseFileMsg((0, path_1.resolve)(__dirname, 'data/kerberos/krb-ap-rep.base64.der'), {
            encodingRule: src_1.EncodingRule.DER,
            format: ASN1MessageFormat_1.ASN1MessageFormat.BASE64,
        });
        assert_1.default.deepStrictEqual(output, krb_ap_rep_json_1.default);
    });
    it('validate AP-REP', () => {
        const definition = (0, fs_1.readFileSync)((0, path_1.resolve)(__dirname, 'data/kerberos/kerberos.asn1'), {
            encoding: 'utf8',
        });
        const module = src_1.ASN1.getModuleFromStr(definition);
        const validated = src_1.ASN1.validate(module, krb_ap_rep_json_1.default, 'GSS-API');
        // console.log('validated: ', inspect(validated, false, null, true));
        assert_1.default.deepStrictEqual(validated, krb_ap_rep_validated_json_1.default);
    });
});
//# sourceMappingURL=kerberos.spec.js.map